#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Sun Jan  8 08:48:45 2023@author: kaoutherboulaouinat"""import streamlit as stfrom keras.models import load_model import time from keras_preprocessing.text import Tokenizer from keras_preprocessing.sequence import pad_sequences from gensim.models import Word2Vec import pickle import sysfrom PIL import Image# load lstm modelw2v_model = Word2Vec.load('../model.w2v')model = load_model('../model.h5') with open('../tokenizer.pkl', 'rb') as handle: tokenizer = pickle.load(handle) with open('../encoder.pkl', 'rb') as handle: encoder = pickle.load(handle)SEQUENCE_LENGTH = 300EPOCHS = 8BATCH_SIZE = 1024POSITIVE = "POSITIVE"NEGATIVE = "NEGATIVE"NEUTRAL = "NEUTRAL"SENTIMENT_THRESHOLDS = (0.4, 0.7)def decode_sentiment(score, include_neutral=True):    if include_neutral:        label = NEUTRAL        if score <= SENTIMENT_THRESHOLDS[0]: label = NEGATIVE         elif score >= SENTIMENT_THRESHOLDS[1]:            label = POSITIVE        return label    else:        return NEGATIVE if score < 0.5 else POSITIVE    def predict(text, include_neutral=True):     start_at = time.time()     x_test = pad_sequences(tokenizer.texts_to_sequences([text]), maxlen=SEQUENCE_LENGTH)     # Predict     score = model.predict([x_test])[0]     # Decode  sentiment     label = decode_sentiment(score, include_neutral=True)     return {"label": label, "score": float(score), "elapsed_time": time.time()-start_at}# region formatst.set_page_config(page_title="Semantic analytics App", page_icon="ðŸ”—",                   layout="wide")  # needs to be the first thing after the streamlit importst.title("Semantic analytics App")st.subheader("Choose a model from the sidebar, or click on comparaison button")st.sidebar.title(":chart_with_upwards_trend: Prediction")model_choice = st.sidebar.selectbox(    'Choose a Model',    ('Logistic Regression', 'Naive Bayes', 'LSTM'))text_input = st.sidebar.text_input(        "Enter some text ðŸ‘‡",        placeholder="Sentence to predict",    )col1, col2, col3 = st.sidebar.columns(3)if col2.button('Predict'):    if model_choice == 'Logistic Regression':                print("You can become a web developer.")                st.write("hahahah")    elif model_choice == 'Naive Bayes':                print("You can become a Data Scientist")    else :                print(type(text_input))                result=predict(text_input)                st.subheader(":red[**LSTM Prediction**] :sunglasses:")                st.markdown(f'  - **Label**: :green[{result["label"]}] \n  - **Score**: :green[{result["score"]}] \n  - **Elapsed time**: :green[{result["elapsed_time"]}]',unsafe_allow_html=True)                         st.sidebar.title(":chart_with_downwards_trend: Compare Models")   col11, col12, col13 = st.sidebar.columns(3)if col12.button('Compare'):     st.subheader(":red[LSTM]")     col21, col22, col23 = st.columns(3)       lstm1 = Image.open('../plot1.png')     lstm2 = Image.open('../plot.png')     lstm3 = Image.open('../matrix.png')     col21.image(lstm1, caption='accuracy')     col22.image(lstm2, caption='loss')     col23.image(lstm3, caption='confusion matrix')     st.subheader(":red[Logistic Regression]")     col31, col32, col33 = st.columns(3)     st.subheader(":red[Naive Bayes]")     col41, col42, col43 = st.columns(3)